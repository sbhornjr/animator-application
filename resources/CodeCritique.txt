Code Critique

	We had an interesting experience with our providers' code. When they first gave it to us,
many of the interfaces included references to classes, which is obviously a problem because we are
not allowed to get their classes. After a day of back and forth with Terry Roy, our providers'
liaison to our team, we got everything sorted out. Terry was a great help throughout this
assignment, creating interfaces for all of those stray classes and providing us that code, and
answering any questions we had. It took us a bit to figure out how their code worked, specifically
how their view accessed specific shapes and actions, but we hit the ground running once we did
figure it out.

DESIGN CRITIQUE

	 The design of the providers' model code was fairly simple and easy to understand. The main
problem we ran into was implementing their view shapes and view animations, which is what they
called the shapes and animations that the view had access to. In order to change their model's
shapes and animations into shapes and animations that the view could interact with, they used
visitors. This whole process was quite frustrating; not because of the visitors per se, but because
we had to create a view version of every single specific model class (i.e. RectangleView, OvalView,
ScaleView, MoveView, etc), and since the ShapeView and AnimationView interfaces implemented the
Shape and Animation interfaces and had many methods of their own, there were a lot of methods to
write for each of these classes. The most frustrating part about it is that we cannot figure out why
they did any of this. At first we thought it was to create read-only versions of the shapes and
animations, but the ShapeView and AnimationView interfaces have setters in them, so these are not
even read-only versions. Terry told us that it is so that the shapes don't draw themselves, they
have the ShapeViews do it. This makes sense, and it works, but we just feel that they went to
lengths they did not need to go to in order to do a task that we feel is simpler than they made it
out to be.

IMPLEMENTATION CRITIQUE

	We were able to integrate our providers' model code with ours pretty easily. The interfaces
for their model, shapes, and actions are fairly flexible, so we were able to simply have our classes
implement their interfaces as well as our interfaces and add their methods to the classes. This
ensured that our views could call our shapes' and other methods and their views could call their
shapes' and other methods separately, even though they are looking at the same shapes. Their
views worked well and we really liked the UI of their hybrid view. All in all, their implementation
was well done and allowed our implementation to integrate pretty well with theirs.

DOCUMENTATION CRITIQUE

	The other thing that was slightly frustrating about their code was that the javadoc in some
places was less than ideal. The javadoc in the visitor classes, for example, did not fully explain
what they were doing while we were still trying to figure them out, which is why we had to ask Terry
what their purposes were. Most of their code was well documented, but there were just a few areas
that could have been documented better.

DESIGN/CODE LIMITATIONS

	The one thing about their views that didn't work perfectly was that removing and adding shapes
to the animation in the hybrid view did not happen seamlessly; the animation has to restart for this
to come into effect. Because of this, the attributes of the other shapes in the animation don't
actually get reset until they have to change themselves.

SUGGESTIONS

	To fix the shape removal problem I just mentioned, I would suggest that they make the shapes
become invisible and visible again instead of actually removing them and re-adding them to the
model. I would also suggest that they use a simple read-only model, shapes, and animations instead
of the visitor system with the view shapes and animations.